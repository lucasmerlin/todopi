// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rPHLiaKgVs2doeGeK5nfK5
// Component: 6AnE5e-hsw
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TodoListItem from "../../TodoListItem"; // plasmic-import: xZQZUUFdGP/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_todo_pi.module.css"; // plasmic-import: rPHLiaKgVs2doeGeK5nfK5/projectcss
import sty from "./PlasmicTodoList.module.css"; // plasmic-import: 6AnE5e-hsw/css

export type PlasmicTodoList__VariantMembers = {};
export type PlasmicTodoList__VariantsArgs = {};
type VariantPropType = keyof PlasmicTodoList__VariantsArgs;
export const PlasmicTodoList__VariantProps = new Array<VariantPropType>();

export type PlasmicTodoList__ArgsType = {};
type ArgPropType = keyof PlasmicTodoList__ArgsType;
export const PlasmicTodoList__ArgProps = new Array<ArgPropType>();

export type PlasmicTodoList__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  todoListItem?: p.Flex<typeof TodoListItem>;
};

export interface DefaultTodoListProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicTodoList__RenderFunc(props: {
  variants: PlasmicTodoList__VariantsArgs;
  args: PlasmicTodoList__ArgsType;
  overrides: PlasmicTodoList__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__aYmu
            )}
          >
            {(() => {
              try {
                return $ctx.todos.length + " To-dos";
              } catch (e) {
                if (e instanceof TypeError) {
                  return "To-Do";
                }
                throw e;
              }
            })()}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__htno6
            )}
          >
            {(() => {
              try {
                return (
                  new Date().toLocaleDateString("de", { weekday: "short" }) +
                  ", " +
                  new Date().toLocaleDateString("de")
                );
              } catch (e) {
                if (e instanceof TypeError) {
                  return "To-Do";
                }
                throw e;
              }
            })()}
          </div>
        </div>
      ) : null}
      {(
        (() => {
          try {
            return $ctx.todos;
          } catch (e) {
            if (e instanceof TypeError) {
              return [];
            }
            throw e;
          }
        })() ?? []
      ).map((currentItem, currentIndex) => (
        <TodoListItem
          data-plasmic-name={"todoListItem"}
          data-plasmic-override={overrides.todoListItem}
          bg={currentIndex % 2 ? "dark" : "light"}
          checked={(() => {
            try {
              return currentItem.isCompleted;
            } catch (e) {
              if (e instanceof TypeError) {
                return "checked";
              }
              throw e;
            }
          })()}
          className={classNames("__wab_instance", sty.todoListItem)}
          due={(() => {
            try {
              return new Date(currentItem.due?.date).toLocaleDateString("de");
            } catch (e) {
              if (e instanceof TypeError) {
                return "22.02.23";
              }
              throw e;
            }
          })()}
          isDue={
            new Date(currentItem.due.date) < new Date(new Date().toDateString())
          }
          key={currentIndex}
        >
          {(() => {
            try {
              return currentItem.content;
            } catch (e) {
              if (e instanceof TypeError) {
                return "Enter some text";
              }
              throw e;
            }
          })()}
        </TodoListItem>
      ))}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "todoListItem"],
  freeBox: ["freeBox"],
  todoListItem: ["todoListItem"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  todoListItem: typeof TodoListItem;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTodoList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTodoList__VariantsArgs;
    args?: PlasmicTodoList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTodoList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTodoList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTodoList__ArgProps,
          internalVariantPropNames: PlasmicTodoList__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicTodoList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTodoList";
  } else {
    func.displayName = `PlasmicTodoList.${nodeName}`;
  }
  return func;
}

export const PlasmicTodoList = Object.assign(
  // Top-level PlasmicTodoList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    todoListItem: makeNodeComponent("todoListItem"),

    // Metadata about props expected for PlasmicTodoList
    internalVariantProps: PlasmicTodoList__VariantProps,
    internalArgProps: PlasmicTodoList__ArgProps
  }
);

export default PlasmicTodoList;
/* prettier-ignore-end */
